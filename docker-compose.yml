# Authentication Microservices Application
# Full-stack microservices with React frontend, Node.js backend, and PostgreSQL database

services:
  # Frontend Service - React Application
  frontend:
    build: 
      context: ./frontend
    depends_on:
      - backend
      - auth-service
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:3001
      - REACT_APP_AUTH_URL=http://localhost:3002
    networks:
      - front-tier
      - back-tier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend Service - Node.js/Express API
  backend:
    build: 
      context: ./backend
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - FRONTEND_URL=http://localhost:3000
    networks:
      - front-tier
      - back-tier
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Authentication Service - Dedicated JWT-based auth service
  auth-service:
    build: 
      context: ./auth-service
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - REDIS_URL=redis://redis:6379
      - FRONTEND_URL=http://localhost:3000
    networks:
      - front-tier
      - back-tier
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Service - PostgreSQL
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "postgres"
    volumes:
      - "db-data:/var/lib/postgresql/data"
      - "./database/init.sql:/docker-entrypoint-initdb.d/init.sql"
      - "./healthchecks:/healthchecks"
    ports:
      - "5432:5432"
    healthcheck:
      test: /healthchecks/postgres.sh
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - back-tier

  # Redis Service - For session management and caching
  redis:
    image: redis:7-alpine
    volumes:
      - "redis-data:/data"
      - "./healthchecks:/healthchecks"
    ports:
      - "6379:6379"
    healthcheck:
      test: /healthchecks/redis.sh
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - back-tier

volumes:
  db-data:
  redis-data:

networks:
  front-tier:
  back-tier:
